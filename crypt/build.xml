<project name="Ant Builder" default="dist" basedir=".">
	<description>
        Application build file.
    </description>
	<!-- set global properties for this build -->
	<property name="src" location="src/java" />
	<property name="build" location="classes" />
	<property name="dist" location="dist" />
	<property name="lib.dir" location="libs" />
	<property name="hibernate.lib.dir" location="/home/marcello/downloads/hibernate-2.1/lib" />
	<!-- change this value to the name of the application -->
	<property name="app.name" value="cryptonline.core" />

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<!--<mkdir dir="${build}" />-->
	</target>

	<target name="createtables" description="creates database tables">
        <taskdef name="schemaexport"
           classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask">
           <classpath>
           	<fileset dir="${hibernate.lib.dir}/">
           		<include name="*.jar"/>
           </fileset>
           </classpath>
        </taskdef>
        <schemaexport quiet="no" text="no" drop="no" delimiter=";"
        	config="src/java/hibernate.cfg.xml" output="create-tables.sql">
           <fileset dir="${class.dir}" includes="**/*.hbm.xml"/>
        </schemaexport>
	</target>

    <patternset id="jar.files">
            <include name="**/*.xml"/>
    </patternset>

    <patternset id="source.files">
             <!-- include everything we want in the src directory
                  that we didn't want in the jar itself -->
             <include name="**/*.java"/>
     </patternset>


	<target name="compile" depends="init, del" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<mkdir dir="${build}"/>
		<javac debug="on" srcdir="${src}" destdir="${build}">
			<classpath>
	           <fileset dir="${hibernate.lib.dir}/">
	           		<include name="*.jar"/>
	           </fileset>
	           <fileset dir="${lib.dir}/">
	           		<include name="*.jar"/>
	           </fileset>
	           <fileset dir="/home/marcello/downloads/mysql-connector-java-5.0.8">
	           		<include name="*.jar"/>
	           </fileset>
			</classpath>
		</javac>
		<copy todir="${build}">
            <fileset dir="${src}">
                    <patternset refid="jar.files"/>
            		<exclude name="log4j.*"/>
            </fileset>
		</copy>
	</target>

	<target name="compiledug" depends="init,del" description="compile for debug ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="on" srcdir="${src}" destdir="${build}" classpath="WEB-INF/classes:
			C:\Program Files\Apache Software Foundation\Tomcat 5.5\common\lib\servlet-api.jar:
			WEB-INF/lib/cos.jar:
			WEB-INF/lib/activation.jar:
			WEB-INF/lib/mail.jar:
			C:\Program Files\Apache Software Foundation\Tomcat 5.5\common\lib\mysql-connector-java-3.1.8-bin.jar:
			WEB-INF/lib/commons-dbcp-1.2.1.jar:
			WEB-INF/lib/commons-logging.jar:
			WEB-INF/lib/commons-validator-1.1.3.jar:
			WEB-INF/lib/log4j-1.2.6.jar:
			WEB-INF/lib/DBPool_v4.7.1.jar:
			WEB-INF/lib/jdom.jar" />
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<mkdir dir="${dist}/lib" />
		<jar jarfile="${dist}/lib/${app.name}-${DSTAMP}${TSTAMP}.jar" basedir="${build}" />
		<copy file="${dist}/lib/${app.name}-${DSTAMP}${TSTAMP}.jar"
			  tofile="/home/marcello/development/workspace/cryptonlinepages/WEB-INF/lib/cryptonline.core.jar" />
	</target>

	<target name="copyDistrLibs">

		<copy todir="/home/marcello/development/workspace/cryptonlinepages/WEB-INF/lib/">
           <fileset dir="${hibernate.lib.dir}/">
           		<include name="*.jar"/>
           </fileset>
           <fileset dir="${lib.dir}/">
           		<include name="*.jar"/>
           </fileset>
           <fileset dir="/home/marcello/downloads/mysql-connector-java-5.0.8">
           		<include name="*.jar"/>
           </fileset>
		</copy>
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->

		<delete dir="${dist}" />

	</target>

	<target name="del" description="clean up">
		<delete>
		    <fileset dir="${build}" includes="**/*.class"/>
			<fileset dir="${build}" includes="**/*.xml"/>
		</delete>
	</target>

	<target name="war" depends="compile" description="Builds the WAR file for installation.">
		<war destfile="c:/upload/sample.war" webxml="WEB-INF/web.xml">
			<fileset dir=".">
				<exclude name="WEB-INF/scr/**" />
				<exclude name="**/*.java" />
				<exclude name="ROOT.war" />
				<exclude name="work/**" />
			</fileset>


		</war>
	</target>




</project>